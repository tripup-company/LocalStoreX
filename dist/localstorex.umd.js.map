{"version":3,"file":"localstorex.umd.js","sources":["../src/type/TypeGuards.js","../src/LocalStoreX.js"],"sourcesContent":["/**\n * Checks if the given object conforms to the IStorageItem interface.\n *\n * @param {any} obj - The object to be checked.\n * @return {boolean} - Returns true if the object is an IStorageItem, otherwise false.\n */\nexport function isIStorageItem(obj) {\n    return (obj &&\n        typeof obj === 'object' &&\n        typeof obj.version === 'string' &&\n        (typeof obj.expiration === 'number' || obj.expiration === null) &&\n        obj.value !== undefined);\n}\n","import { isIStorageItem } from './type/TypeGuards';\nexport default class LocalStoreX {\n    /**\n     * Constructor for initializing the object with a version helper and an optional default expiration time.\n     * Also performs cleanup of expired items.\n     *\n     * @param {string} defaultVersion - Default version for managing stored objects.\n     * @param {number} [defaultExpiration=null] - The default expiration time for items in seconds.\n     *\n     * @return {void}\n     */\n    constructor(defaultVersion = 'v1', defaultExpiration = null) {\n        Object.defineProperty(this, \"defaultVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: defaultVersion\n        });\n        Object.defineProperty(this, \"defaultExpiration\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: defaultExpiration\n        });\n    }\n    /**\n     * Returns a singleton instance of the LocalStoreX class.\n     * If one does not already exist, it creates one with the provided configuration.\n     *\n     * @param {Object} [config] - Optional configuration object.\n     * @param {string} [config.defaultVersion='v1'] - Specifies the default version for the instance.\n     * @param {null} [config.defaultExpiration=null] - Specifies the default expiration for the instance.\n     * @return {LocalStoreX} The singleton instance of the LocalStoreX class.\n     */\n    static getInstance(config) {\n        if (!LocalStoreX.instance) {\n            const expiration = config?.defaultExpiration ?? null;\n            const version = config?.defaultVersion ?? 'v1';\n            LocalStoreX.instance = new LocalStoreX(version, expiration);\n        }\n        return LocalStoreX.instance;\n    }\n    /**\n     * Stores an item in the local storage with the specified key, data, and optional version and expiration.\n     *\n     * @param {string} key - The key under which the data will be stored.\n     * @param {any} data - The data to be stored.\n     * @param {number} [expiration] - Optional expiration time for the data in seconds.\n     * @param {string} [providedVersion] - Optional version information for the data.\n     * @return {void}\n     */\n    setItem(key, data, expiration, providedVersion) {\n        const version = providedVersion || this.defaultVersion;\n        const existingItem = this.getExistingItem(key);\n        const updatedItem = existingItem\n            ? this.updateExistingItem(existingItem, data, version, expiration)\n            : this.createNewItem(data, expiration, version);\n        localStorage.setItem(key, JSON.stringify(updatedItem));\n    }\n    /**\n     * Retrieves an item from storage by its key and optional version.\n     *\n     * @param {string} key - The key of the item to retrieve.\n     * @param {string} [version] - Optional version to retrieve a specific version of the item.\n     * @return {*} The data stored under the given key and version, or null if the item does not exist or is expired.\n     */\n    getItem(key, version) {\n        const item = this.getExistingItem(key);\n        if (!item || this.isExpired(item.expiration)) {\n            localStorage.removeItem(key);\n            return null;\n        }\n        const actualVersion = version || this.defaultVersion;\n        if (item.version === actualVersion) {\n            return item.value;\n        }\n        return null;\n    }\n    /**\n     * Removes an item from the local storage based on the specified key.\n     *\n     * @param {string} key - The key of the item to be removed from local storage.\n     * @return {void}\n     */\n    removeItem(key) {\n        localStorage.removeItem(key);\n    }\n    /**\n     * Clears all key-value pairs stored in the local storage.\n     *\n     * @return {void}\n     */\n    clear() {\n        localStorage.clear();\n    }\n    /**\n     * Retrieves an existing item from local storage.\n     *\n     * @param {string} key - The key under which the item is stored.\n     * @return {IStorageItem | null} The parsed item if found, otherwise null.\n     */\n    getExistingItem(key) {\n        try {\n            const item = localStorage.getItem(key);\n            if (!item)\n                return null;\n            const parsedItem = JSON.parse(item);\n            return isIStorageItem(parsedItem) ? parsedItem : null;\n        }\n        catch (error) {\n            console.warn(`Error parsing JSON for key \"${key}\":`, error);\n            return null;\n        }\n    }\n    /**\n     * Creates a new storage item with the given version and optional expiration time.\n     *\n     * @param {any} data - The data to be stored.\n     * @param {number} [expiration] - Optional expiration time in seconds.\n     * @param {string} [version] - The version of the new storage item.\n     * @return {IStorageItem} The newly created storage item.\n     */\n    createNewItem(data, expiration, version) {\n        return {\n            version: version ?? this.defaultVersion,\n            expiration: expiration ? Date.now() + expiration * 1000 : this.defaultExpiration,\n            value: data,\n        };\n    }\n    /**\n     * Updates an existing storage item with new data, version, and expiration time.\n     *\n     * @param {IStorageItem} existingItem - The existing item to update.\n     * @param {any} data - The new data to store.\n     * @param {string} version - The version to set for the item.\n     * @param {number} [expiration] - Optional expiration time for the item in seconds.\n     * @returns {IStorageItem} Returns the updated item.\n     */\n    updateExistingItem(existingItem, data, version, expiration) {\n        return {\n            ...existingItem,\n            version,\n            value: data,\n            expiration: expiration ? Date.now() + expiration * 1000 : existingItem.expiration,\n        };\n    }\n    /**\n     * Checks whether the given expiration timestamp has passed.\n     *\n     * @param {number | null} expiration - The timestamp to check for expiration, or null to indicate no expiration.\n     * @return {boolean} Returns true if the current time is greater than the expiration time, false otherwise.\n     */\n    isExpired(expiration) {\n        return expiration !== null && Date.now() > expiration;\n    }\n}\n"],"names":[],"mappings":"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"}